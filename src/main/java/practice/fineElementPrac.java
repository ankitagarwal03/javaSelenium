package practice;

import com.beust.ah.A;
import jdk.nashorn.internal.runtime.ECMAException;
import org.apache.poi.util.SystemOutLogger;
import org.openqa.selenium.By;
import org.openqa.selenium.SearchContext;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;

import java.lang.reflect.Array;
import java.util.*;

public class fineElementPrac {
    static WebDriver driver;

    public static void main(String[] args) {
//        driver = new FirefoxDriver();
//
//        WebElement email = driver.findElement(By.id(""));
//        email.click();

//        WebElement pass = driver.findElement(By.id(""));
//        pass.click();

//        WebElement e = doFindElement("email");
//        e.sendKeys("");
//        boolean f = isPalindrome("A man, a plan, a canal: Panama");
//        boolean f = isPalindrome("");
//        System.out.println("result = "+f);
//        int [] a = {0,1,2,2,3,0,4,2};
//        removeElement(a,2);
//        boolean a = true;
//        boolean b = false;
//        System.out.println(Boolean.compare(a,b));
//        System.out.println(Boolean.compare(b,a));
//        int [] a = {2,2,1,3,3,3,3,};
//        singleNumber(a);
//        majorityElement(a);
//        System.out.println(majorityElementOne(a));
//        String[] strs = {"flower","flow","flight"};
//        String[] strs = {"ab", "a"};
//        String[] strs = {"a", "b"};
//        String[] strs = {"a"};
//        String[] strs = {"dog","racecar","car"};
//        String g = "aaa";

//        System.out.println("output = "+longestCommonPrefix(strs));

//        System.out.println("FINAL RESULT = "+firstUniqChar("loveleetcode"));
//        System.out.println(reverseVowels("leetcode"));
//        System.out.println(reverseVowels("\"Marge, let's \"went.\" I await news telegram.\""));
//        System.out.println(reverseVowels("hello"));
//        System.out.println(reverseVowels("Euston saw I was not Sue."));
//        boolean flag = canConstruct("aa","aab");
//        boolean flag = canConstructLeet("aa","aab");
//        boolean flag = canConstruct("ce","e"); //
//        boolean flag = canConstruct("yekbsxznylrwamcaugrqrurvpqybkpfzwbqiysrdnrsnbftvrnszfjbkbmrctjizkjqoxqzddyfnavnhqeblfmzqgsjflghaulbadwqsyuetdelujphmlgtmkoaoijypvcajctbaumeromgejtewbwqptotrorephegyobbstvywljboeihdliknluqdpgampjyjpinxhhqexoctysfdciqjbzilnodzoihihusxluqoayenluziobxiodrfdkinkzzozmxfezfvllpdvogqqtquwcsijwachefspywdgsohqtlquhnoecccgbkrzqcprzmwvygqwddnehhi",
//                "" );
//        boolean flag = canConstruct("bg","efjbdfbdgfjhhaiigfhbaejahgfbbgbjagbddfgdiaigdadhcfcj");
//        boolean flag = canConstruct("ihgg","ch");
//        boolean flag = canConstruct("itwqbtcdprfsuprkrjkausiterybzncbmdvkgljxuekizvaivszowqtmrttiihervpncztuoljftlxybpgwnjb"
//                ,"");
//        System.out.println("Final Result - "+flag);

//        System.out.println("Final Result - "+addDigits(384));
//        int[] a = {1,0,3};
//        int[] a = {0,1};
//        int[] a = {9,6,4,2,3,5,7,0,1};
//        int[] a = {0};
//        System.out.println("Final Result "+missingNumber(a));
//        int a = 7;
//        int a = 2;
//        int a = 19;
//        int a = 1111111;
//        int a = 1;
//        System.out.println("Final Result "+isHappy(a));
//        int nums[] = {0,1,0,3,12};
//        int nums[] = {0};
//        int nums[] = {2,1};
//        int nums[] = {0,0,1};
//        moveZeroes(nums);
//
//        int n = 3;
//        int n = 15;
//        fizzBuzz(n);

//        int[] ind = {4,5,6,7,0,2,1,3};
//        restoreString("codeleet",ind);

//        String key = "the quick brown fox jumps over the lazy dog";
//        String message = "vkbs bs t suepuv";
//        key = "eljuxhpwnyrdgtqkviszcfmabo";
//        message = "zwx hnfx lqantp mnoeius ycgk vcnjrdb";
//        decodeMessage(key,message);

//        selfDividingNumbers(1,85);
//        System.out.println(rotateString("abcde","cdeab"));
//        System.out.println(rotateString("abcde","abced"));
//        int width[] = {4,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
//        String s = "bbbcccdddaaa";
//        int width[] = {10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10};
//        String s = "abcdefghijklmnopqrstuvwxyz";
//        int[] res = numberOfLines(width,s);
//        System.out.println(Arrays.toString(res));

//        sortArrayByParity(new int[] {3,1,2,4});
//        sortArrayByParity(new int[] {0,1});
//        sortArrayByParity(new int[] {2,1,2,4});

//        reverseOnlyLetters("ab-cd");
//        reverseOnlyLetters("a-bC-dEf-ghIj");
//        reverseOnlyLetters("Test1ng-Leet=code-Q!");


//        String s1 = "this apple is sweet";
//        String s2 = "apple is sour this";
//        String s1 = "apple apple";
//        String s2 = "banana";
//        String s1 = "s z z z s";
//        String s2 = "s z ejt";
//        System.out.println(Arrays.toString(uncommonFromSentences(s1,s2)));

//        String();

//        System.out.println(findComplement(5));
//        System.out.println(findComplement(1));


        String[] a =  {"5","2","C","D","+"};
//        String[] a =  {"5","-2","4","C","D","9","+","+"};
//        String[] a =  {"1","C"};
        calPoints(a);
    }

    //https://leetcode.com/problems/baseball-game/
    public static int calPoints(String[] operations) {
        Stack<Integer> st = new Stack<Integer>();

        for(int i=0;i<operations.length;i++){
            if(operations[i] == "+"){
                int f = st.pop();
                int s = st.pop();
                int r = f+s;
                st.push(s);
                st.push(f);
                st.push(r);
//                System.out.println("inside + == "+st);
            }
            else if(operations[i].equals("D")){
                int re = st.pop();
                st.push(re);
                st.push(re*2);
//                System.out.println("inside D == "+st);
            }
            else if(operations[i] == "C"){
                st.pop();
//                System.out.println("inside C == "+st);
            }
            else {
                st.push(Integer.parseInt(operations[i]));
//                System.out.println("inside Else == "+st);
            }

        }
        int result = 0;
//        System.out.println(st.size()+"  "+st);
        for(int i=0;i<st.size();i++){
            int e = st.get(i);
//            System.out.println("e = "+e+"  i = "+i);
            result += e;
//            System.out.println(result);
        }
//        System.out.println(result);
        return result;
    }


    public static int findComplement(int num){
        String aa = Integer.toBinaryString(num);
        StringBuilder str = new StringBuilder("");
//        System.out.println(aa);
        for(int i=0;i<aa.length();i++){
//            System.out.println(aa.charAt(i));
//            System.out.println("int = "+Character.getNumericValue(aa.charAt(i)));
            if(Character.getNumericValue(aa.charAt(i)) == 0){
                str.append(1);
            }
            else{
                str.append(0);
            }
        }
//        System.out.println("str = "+str);
        return Integer.parseInt(str.toString(),2);
    }

    public static void String(){
        String word1 = "java";
        String word2 = "sol";
        word1.concat(word2);
        System.out.println(word1);
    }

    //https://leetcode.com/problems/uncommon-words-from-two-sentences/
    public static String[] uncommonFromSentences(String s1, String s2) {
        Map<String, Integer> mp = new HashMap<String, Integer>();
        String[] s1Split = s1.split(" ");
        String[] s2Split = s2.split(" ");

        for (int i = 0; i < s1Split.length; i++) {
            if(mp.containsKey(s1Split[i])){
                Integer p = mp.get(s1Split[i]);
                mp.put(s1Split[i], ++p);
            }else {
                mp.put(s1Split[i], 1);
            }
        }
        for (int i = 0; i < s2Split.length; i++) {
            if(mp.containsKey(s2Split[i])){
                Integer p = mp.get(s2Split[i]);
                mp.put(s2Split[i], ++p);
            }else {
                mp.put(s2Split[i], 1);
            }
        }
        System.out.println("S1 Map mp = "+mp);
        ArrayList<String> li = new ArrayList<>();

        for(Map.Entry<String, Integer> mp1 : mp.entrySet()){
            String key = mp1.getKey();
            Integer val = mp1.getValue();
            if(val == 1){
                li.add(key);
            }
        }


        String[] finalOut = new String[li.size()];
        if(li.size()>0) {
            int j=0;
            for(String list : li) {
                finalOut[j] = list;
                j++;
            }
        }

        return finalOut;
    }

//    https://leetcode.com/problems/reverse-only-letters/
    public static String reverseOnlyLetters(String s) {
        ArrayList<Integer> li = new ArrayList<>();
        char[] ch = s.toCharArray();
        for(int i=0;i<ch.length;i++){
            if(!((ch[i] >='a' && ch[i] <='z') || (ch[i] >='A' && ch[i] <='Z'))){
                li.add(i);
            }
        }
        String temp=s;
        s = s.replaceAll("[^a-zA-Z]","");
        System.out.println(li);
        System.out.println(s);

        StringBuilder str = new StringBuilder("");
        for(int i=(s.length()-1);i>=0;i--){
            str.append(s.charAt(i));
        }
        System.out.println(str);

        for(int i=0;i<li.size();i++){
            String e = String.valueOf(temp.charAt(li.get(i)));
            str.insert(li.get(i),e);
        }
        System.out.println("-----------"+str);
        return str.toString();
    }

    //https://leetcode.com/problems/sort-array-by-parity/
    public static int[] sortArrayByParity(int[] nums) {
        if(nums.length == 1){
            return nums;
        }

        for(int i=0;i<nums.length;i++){
            System.out.println("inside the first "+nums[i]+" index of i = "+i);
            if((nums[i]%2) != 0){
                int temp = 0;
                temp = nums[i];
                System.out.println("temp == "+temp);
                for(int j=i+1;j<nums.length;j++){
                    if ((nums[j]%2) == 0) {
                        nums[i] = nums[j];
                        nums[j] = temp;
                        System.out.println("nums[j] "+nums[j]+" nums[i] "+nums[i]+" temp "+temp);
                        System.out.println(Arrays.toString(nums));
                        break;
                    }
                }
                System.out.println(Arrays.toString(nums));
                System.out.println("-------------");
            }
        }
        System.out.println("FINAL "+Arrays.toString(nums));
        return nums;
    }

    public static int[] numberOfLines(int[] widths, String s) {
        int sum = 0;
        int totalLine = 1;
        for(int i=0;i<s.length();i++){
            int chr = s.charAt(i);
            System.out.println(chr);
            System.out.println(chr +" index = "+widths[chr-97]);
            System.out.println("sum <= 100 :: "+(sum <= 100));
//            System.out.println("Second :: "+((sum += widths[chr-97]) <= 100)+"   sum = "+sum);
            if(sum <= 100 && (sum += widths[chr-97]) <= 100){
//                sum += widths[chr-97];
                System.out.println(sum);
            }
            else{
                totalLine++;
                sum=0;
                sum += widths[chr-97];
                System.out.println("inside the else " +totalLine +" sum = "+sum);
            }
            System.out.println("------------------");
        }
        int[] result = {totalLine,sum};
//        result[0] = totalLine;
//        result[1] = sum;
        return result;
    }

    //https://leetcode.com/problems/rotate-string/
    public static boolean rotateString(String s, String goal) {

        char[] ch = s.toCharArray();
        int strLen = s.length()-1;
        for(int i=0;i<s.length()-1;i++) {
            StringBuilder str = new StringBuilder("");
               char temp = ch[0];
               for(int j=0;j<strLen;j++){
                   ch[j] = ch[j+1];
//                   System.out.println("Inside "+Arrays.toString(ch));
                   str.append(ch[j]);
               }
               ch[strLen] = temp;
               str.append(temp);
//               System.out.println(str);
//               System.out.println("FINAL ------ "+Arrays.toString(ch));
               if(str.toString().equals(goal)){
                   return true;
               }
            }
        return false;
    }

    //https://leetcode.com/problems/self-dividing-numbers/
    public static List<Integer> selfDividingNumbers(int left, int right) {
        List<Integer> li = new ArrayList<Integer>();

        for(int i = left; i<=right; i++){
            left = i;
            int initial = left;
            int n = 0;
            System.out.println("left ---- = "+left);
            boolean flag = false;
            while(left != 0){
                int num = left % 10;
                System.out.println("num = "+num);
                left = left / 10;
                System.out.println("left = "+left);
                flag = false;
                if(num == 0){
                    break;
                }

                n = initial % num;
                System.out.println(n);
                if(n == 0) {
                    flag = true;
                }
                else{
                    break;
                }
            }
            if (n == 0 && flag == true) {
                System.out.println("initial = " + initial);
                li.add(initial);
            }
//            left++;
            System.out.println("------------------");
        }
        System.out.println(li);
        return li;
    }

    //https://leetcode.com/problems/decode-the-message/
    public static String decodeMessage(String key, String message) {
        key = key.replaceAll(" ", "");
        Map<Character, Character> mp = new HashMap<>();
        char charValue = 97;
        for (int i = 0; i < key.length(); i++) {
            char c = key.charAt(i);
            if (!mp.containsKey(c)) {
//                System.out.println(c);
//                System.out.println(charValue);
                mp.put(c, charValue);
                charValue++;
            }
        }

        StringBuilder str = new StringBuilder("");
        for (int i = 0; i < message.length(); i++) {
            char c = message.charAt(i);
            if (c == 32) {
                str.append(c);
            } else {
                char Mapchar = mp.get(c);
                str.append(Mapchar);
            }
        }
        System.out.println(str);
//        System.out.println(mp);
//        System.out.println(key);
        return key;
    }

    //https://leetcode.com/problems/shuffle-string/
    public static String restoreString(String s, int[] indices) {
        StringBuilder str = new StringBuilder("");
        for (int i = 0; i < indices.length; i++) {
            for (int j = 0; j < indices.length; j++) {
                System.out.println((i == indices[j]) + "  " + j);
                if (i == indices[j]) {
                    System.out.println(s.charAt(j) + " j= " + j);
                    str.append(String.valueOf(s.charAt(j)));
                    break;
                }
            }
            System.out.println(str);
        }

        return s;
    }

    // https://leetcode.com/problems/fizz-buzz/
    public static List<String> fizzBuzz(int n) {
        String[] arr = new String[n];

        for (int i = 0; i < n; i++) {
//            boolean flag = false;
            int sum = i + 1;
            System.out.println(" sum = " + sum);
            System.out.println(" sum%3 = " + sum % 3);
            System.out.println(" sum%5 = " + sum % 5);
            if (sum % 5 == 0 && sum % 3 == 0) {
                System.out.println(" inside sum 3 & 5 = ");
                arr[i] = "FizzBuzz";
//                flag = true;
            } else if (sum % 3 == 0) {
                System.out.println("first if");
                arr[i] = "Fizz";
//                flag = true;
            } else if (sum % 5 == 0) {
                System.out.println("second if");
                arr[i] = "Buzz";
//                flag = true;
            } else {
                System.out.println(" inside else ");
                arr[i] = String.valueOf(sum);
            }
//            if(flag == false){
//                System.out.println(" inside else ");
//                arr[i] = String.valueOf(sum);
//            }
            System.out.println(Arrays.toString(arr));
        }

        List<String> li = new ArrayList<String>();
        for (int i = 0; i < n; i++) {
            li.add(arr[i]);
        }
        return li;
    }

    //https://leetcode.com/problems/intersection-of-two-arrays/
    public int[] intersection(int[] nums1, int[] nums2) {

        return new int[0];
    }

    // https://leetcode.com/problems/move-zeroes/
    public static void moveZeroes(int[] nums) {
        int temp = 0;
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] != 0) {
                nums[temp] = nums[i];
                temp++;
            }
        }
        while (temp < nums.length) {
            nums[temp] = 0;
            temp++;
        }
        System.out.println(Arrays.toString(nums));
    }

    public static boolean isHappy(int n) {
        HashSet<Integer> set = new HashSet<>();
        int count = 0;
        int sum = 0;
        while (n != 1) {
            if (!set.contains(n)) {
                System.out.println("----" + n);
                set.add(n);
            } else {
                return false;
            }

            while (n != 0) {
                count = n % 10;
                sum += count * count;
                n = n / 10;
                System.out.println("count = " + count + " sum = " + sum + " n = " + n);
            }
            n = sum;
            sum = 0;
            System.out.println("----");
        }
        return true;

    }

    //https://leetcode.com/problems/happy-number/
    public static boolean isHappy1(int n) {
        HashSet<Integer> set = new HashSet<>();
        int count = 0;
        int sum = 0;
        while (n > 0) {
            count = n % 10;
            sum += count * count;
            n = n / 10;
            System.out.println("count = " + count + " sum = " + sum + " n = " + n);

            if (n == 0) {
                n = sum;
                sum = 0;
//                System.out.println(" sum = "+sum+" n = "+n);
            }
        }
        if (sum == 1) {
            return true;
        }
        return false;
    }

    public static int missingNumber(int[] nums) {
        Arrays.sort(nums);
        int count = 0;
//        System.out.println(Arrays.toString(nums));
//        boolean flag = false;
        for (int i = 0; i < nums.length; i++) {
//            System.out.println(i);
//            System.out.println(count);
            if (nums[i] != count) {
                System.out.println("inside if " + count);
//                flag = true;
                return count;
            }
            count++;
        }
//        if(flag){
//            System.out.println("inside 2 if "+ ++count);
//            return ++count;
//        }
        System.out.println("inside 3 if " + count);
        return count;
    }

    public static int addDigits(int num) {
        if (num <= 0) {
            return num;
        }
        int sum = 0;
        int z = 0;
        while (num > 0) {
            z = num % 10;
            sum += z;
            System.out.println(z);
            System.out.println(sum);
            num = num / 10;
            if (sum > 9 && num == 0) {
//                z = sum;
                num = sum;
                sum = 0;
            }
            System.out.println("after divide - " + sum);
        }
        return sum;
    }

    public static boolean canConstructLeet(String ransomNote, String magazine) {
        if (ransomNote.length() > magazine.length()) return false;
        int[] alphabets_counter = new int[26];

        for (char c : magazine.toCharArray())
            alphabets_counter[c - 'a']++;
        System.out.println("first  " + Arrays.toString(alphabets_counter));

        for (char c : ransomNote.toCharArray()) {
            System.out.println(c - 'a');

            if (alphabets_counter[c - 'a'] == 0) {
                System.out.println("before false " + Arrays.toString(alphabets_counter));
                return false;
            }
            alphabets_counter[c - 'a']--;
            System.out.println("before -- " + Arrays.toString(alphabets_counter));
        }
        return true;
    }

    public static boolean canConstruct(String ransomNote, String magazine) {
        if (ransomNote.length() <= 1 && magazine.length() <= 1) {
            return false;
        }
        if (magazine.length() < ransomNote.length()) {
            return false;
        }

        Map<Character, Integer> mp1;
        Map<Character, Integer> mp2;
        mp1 = traverseMap(ransomNote);
        mp2 = traverseMap(magazine);
        System.out.println(mp1);
        System.out.println(mp2);
        int mp1Size = mp1.size();
        int mp2Size = mp2.size();
        int loopLen = 0;

        if (mp1Size > mp2Size) {
            loopLen = mp2Size;
        } else {
            loopLen = mp1Size;
        }
        System.out.println("mp1size = " + mp1Size + "-- mp2size = " + mp2Size + " -- LoopLen = " + loopLen);
        boolean flag = false;
        System.out.println(ransomNote);

        Set<Character> cha = mp1.keySet();
        System.out.println(cha);
        Iterator<Character> it = cha.iterator();

        while (it.hasNext()) {
            Character targetCh = it.next();
            System.out.println(targetCh);
            System.out.println(mp1.get(targetCh));
            System.out.println(mp2.get(targetCh));
            if (mp1.get(targetCh) == null || mp2.get(targetCh) == null) {
                System.out.println("Inside this NEW = ");
                flag = false;
                break;
            }
            if (mp1.get(targetCh) <= mp2.get(targetCh)) {
                System.out.println("inside true flag");
                flag = true;
            } else {
                System.out.println("inside false flag");
                flag = false;
                break;
            }
        }

        if (flag) {
            return true;
        } else {
            return false;
        }
    }
    public static Map traverseMap(String s) {
        char[] ch = s.toCharArray();
        Arrays.sort(ch);
        Map<Character, Integer> mp = new HashMap<>();
        for (int i = 0; i < ch.length; i++) {
            if (mp.containsKey(ch[i])) {
                int len = mp.get(ch[i]);
                mp.put(ch[i], ++len);
            } else {
                mp.put(ch[i], 1);
            }
        }
        return mp;
    }

    public static String reverseVowels(String s) {
        StringBuilder str = new StringBuilder(s);
        int i = 0;
        int j = s.length() - 1;
        int fIndex = 0, lIndex = 0;
        char fChar = 0, lChar = 0;

        while (i < j) {
            System.out.println("is I present ============ I - " + i + " index :: " + (s.charAt(i) == 'I') + " is print - " + s.charAt(i));
            System.out.println("is I present ============ J - " + j + " index :: " + (s.charAt(j) == 'I') + " is print - " + s.charAt(j));
            if (fChar == 0) {
                System.out.println(fChar == 0);
                if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i'
                        || s.charAt(i) == 'o' || s.charAt(i) == 'u' ||
                        s.charAt(i) == 'A' || s.charAt(i) == 'E' || s.charAt(i) == 'I'
                        || s.charAt(i) == 'O' || s.charAt(i) == 'U') {
                    fChar = s.charAt(i);
                    fIndex = i;
                    System.out.println("inside the first IF " + fChar + " index= " + fIndex);
                } else {
                    i++;
                }

            }
            if (lChar == 0) {
                if (s.charAt(j) == 'a' || s.charAt(j) == 'e' || s.charAt(j) == 'i'
                        || s.charAt(j) == 'o' || s.charAt(j) == 'u' ||
                        s.charAt(j) == 'A' || s.charAt(j) == 'E' || s.charAt(j) == 'I'
                        || s.charAt(j) == 'O' || s.charAt(j) == 'U') {
                    lIndex = j;
                    lChar = s.charAt(j);
                    System.out.println("inside the second IF " + lChar + " index= " + lIndex);
                } else {
                    j--;
                }
            }

            if (fChar != 0 && lChar != 0) {
                str.setCharAt(fIndex, lChar);
                str.setCharAt(lIndex, fChar);
                System.out.println("inside the swap = " + str);
                fChar = 0;
                lChar = 0;
                i++;
                j--;
            }
            System.out.println("------------------------------");

        }
        return str.toString();
    }

    public static String reverseVowelsOneByOne(String s) {
        if (s.length() == 0) {
            return s;
        }
        StringBuffer str = new StringBuffer(s);
        char temp = 0;
        int index = 0;
        int secondIndex = 0;
        int counter = 0;
        char secondTemp = 0;
        for (int i = 0; i < str.length(); i++) {
            if (str.charAt(i) == 'a' || str.charAt(i) == 'e' || str.charAt(i) == 'i'
                    || str.charAt(i) == 'o' || str.charAt(i) == 'u' ||
                    str.charAt(i) == 'A' || str.charAt(i) == 'E' || str.charAt(i) == 'I'
                    || str.charAt(i) == 'O' || str.charAt(i) == 'U') {
                counter++;
                System.out.println("counter = " + counter);
                if (counter == 1) {
                    index = i;
                    temp = str.charAt(i);
                    System.out.println(index);
                    System.out.println(temp);
                }
                if (counter == 2) {
                    secondIndex = i;
                    secondTemp = str.charAt(i);
                    str.setCharAt(index, secondTemp);
                    str.setCharAt(secondIndex, temp);
                    System.out.println("second temp " + secondTemp);
                    System.out.println("second index " + secondIndex);
                    index = secondIndex;
                    temp = str.charAt(i);
                    counter = 1;
                }
                System.out.println("-------------------" + str);
            }
        }
        return str.toString();
    }

    public static int firstUniqChar(String s) {
        int firstAcc = 0;
        boolean flag = false;
        for (int i = 0; i < s.length(); i++) {
            flag = false;
            char init = s.charAt(i);
            System.out.println("first = " + init);
            for (int j = 0; j < s.length(); j++) {
                if (i == j) {
                    continue;
                }
                System.out.println("second = " + s.charAt(j));
                if (init == s.charAt(j)) {
                    System.out.println("inside IF");
                    flag = true;
                    break;
                }
            }
            if (flag == false) {
                firstAcc = i;
                return firstAcc;
            }
        }
        return -1;
    }

    public static String longestCommonPrefix(String[] strs) {
        String finalStr = "";
        if (strs.length == 0 || strs[0].length() == 0) {
            return finalStr;
        }
        if (strs.length == 1 && strs[0].length() == 1) {
            return strs[0];
        }
        Arrays.sort(strs);

        boolean flag = false;
        for (int j = 0; j < strs[0].length(); j++) {
            String fStr = charA(strs[0], j);
            System.out.println("First STR = " + fStr);
            for (int i = 1; i < strs.length; i++) {
                String temp = "";
                String sStr = charA(strs[i], j);
                System.out.println("Sec STR = " + sStr);
                if (fStr.equals(sStr)) {
//                    System.out.println("inside the if..");
                    temp = fStr;
                    flag = true;
                } else {
                    flag = false;
                    break;
                }
            }
            if (flag == false) {
                break;
            }
            if (flag) {
                finalStr += fStr;
//                System.out.println("FINAL =========: "+finalStr);
            }
        }
        return finalStr;
    }

    public static String charA(String word, int index) {
        return String.valueOf(word.charAt(index));
    }

    public static int majorityElementOne(int[] nums) {
        Arrays.sort(nums);
        return nums[nums.length / 2];
    }

    public static int majorityElement(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }

        Map<Integer, Integer> mp = new HashMap<>();

        for (int i = 0; i < nums.length; i++) {
            if (mp.containsKey(nums[i])) {
                int count = mp.get(nums[i]);
                mp.put(nums[i], ++count);
            } else {
                mp.put(nums[i], 1);
            }
        }
        System.out.println(mp);
        int high = 0;
        int key = 0;
        for (Map.Entry<Integer, Integer> e : mp.entrySet()) {
            if (e.getValue() > high) {
                high = e.getValue();
                key = e.getKey();
                System.out.println("Value " + high + "   Key = " + key);
            }
        }
        System.out.println("final ans = " + mp.get(key));
        return mp.get(key);
    }

    public static int singleNumber(int[] nums) {
        if (nums.length == 1) {
            return nums[0];
        }

        Map<Integer, Integer> mp = new HashMap<>();

//        int count = 1;
        for (int i = 0; i < nums.length; i++) {
//            System.out.println(nums[i]+"  "+mp.get(nums[i]));
            if (mp.containsKey(nums[i])) {
                int count = mp.get(nums[i]);
//                System.out.println("count= "+count);
                mp.put(nums[i], ++count);
//                System.out.println("inside if");
            } else {
                mp.put(nums[i], 1);
            }
//            System.out.println("Final MP "+mp);
//            System.out.println("-----------");
        }
        System.out.println(mp);
        for (Map.Entry<Integer, Integer> m : mp.entrySet()) {
            if (m.getValue() == 1) {
                return m.getKey();
            }
        }
        return -1;
    }

    public static WebElement doFindElement(String locator) {
        return driver.findElement(By.id(locator));
    }

    public static boolean isPalindrome(String s) {
        boolean flag = false;
        if (s.length() == 0) {
            flag = true;
            return flag;
        }

        String nw = s.toLowerCase().replaceAll("[^a-zA-Z0-9]", "");
        System.out.println(nw);
        char[] ch = nw.toCharArray();
        int j = 0;
        for (int i = ch.length - 1; i >= 0; i--) {
            if (!(nw.charAt(j) == ch[i])) {
                flag = false;
                return flag;
            }
            j++;
        }
        flag = true;
        return flag;
    }

    public static int removeElement(int[] nums, int val) {
        if (nums.length < 0) {
            return 0;
        }
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == val) {
                nums[i] = '_';
            }
        }
        System.out.println(Arrays.toString(nums));
        int len = 0;
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[i] > nums[j]) {
                    int temp = nums[i];
                    nums[i] = nums[j];
                    nums[j] = temp;
                }
            }
        }

        for (int i = 0; i < nums.length; i++) {
            if (nums[i] < 95) {
                len++;
            }
        }
        System.out.println(Arrays.toString(nums));
        System.out.println(len);
        return len;
    }
}
